
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Función para verificar si el usuario es Admin
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Función para verificar si el usuario es Operador (no admin, no unit)
    function isOperator() {
      return request.auth.token.admin != true && request.auth.token.unit != true;
    }

    // Función para verificar si el usuario es Unidad
    function isUnit() {
        return request.auth.token.unit == true;
    }

    // Función para verificar si el usuario está autenticado
    function isSignedIn() {
      return request.auth != null;
    }

    // Colección: users (perfiles de operadores/admins/unidades)
    match /users/{userId} {
      // Admins pueden leer y escribir cualquier perfil.
      // Usuarios autenticados solo pueden leer y actualizar su propio perfil.
      allow read, update: if isAdmin() || request.auth.uid == userId;
      // Admins pueden crear perfiles (aunque el registro lo hace el usuario)
      allow create: if isAdmin() || request.auth.uid == userId;
      // Solo admins pueden borrar perfiles.
      allow delete: if isAdmin();
    }

    // Colección: medicalInfo (datos sensibles de usuarios de la app)
    match /medicalInfo/{userId} {
      // El usuario puede crear y actualizar su propia información médica.
      allow create, update: if request.auth.uid == userId;
      // El usuario puede leer su propia información.
      // Admins y Operadores pueden leer la info si están autenticados.
      allow read: if request.auth.uid == userId || isAdmin() || isOperator();
      // Nadie puede borrar su info médica directamente por seguridad, se gestiona por otros medios.
      allow delete: if false;
    }

    // Colección: stations (estaciones de bomberos/paramédicos)
    match /stations/{stationId} {
      // Cualquiera que haya iniciado sesión (operador, admin, unidad) puede leer las estaciones.
      allow read: if isSignedIn();
      // Solo los administradores pueden crear, actualizar o eliminar estaciones.
      allow create, update, delete: if isAdmin();

      // Subcolección: unidades (ambulancias, etc.)
      match /unidades/{unitId} {
        // Cualquiera que haya iniciado sesión puede leer las unidades.
        allow read: if isSignedIn();
        // Solo los administradores pueden gestionar las unidades.
        allow create, update, delete: if isAdmin();
      }
    }

    // Colección: alerts (el corazón de la aplicación)
    match /alerts/{alertId} {
      // CUALQUIERA (incluyendo anónimos) puede crear una alerta.
      allow create: if true;

      // REGLAS DE LECTURA:
      allow read: if
        // 1. El usuario que creó la alerta puede leerla.
        request.auth.uid == resource.data.userId ||
        // 2. Un administrador puede leer cualquier alerta.
        isAdmin() ||
        // 3. Un operador puede leer alertas asignadas a SU estación.
        (isOperator() && request.auth.token.stationId == resource.data.assignedStationId) ||
        // 4. Una unidad puede leer las alertas asignadas a ELLA.
        (isUnit() && request.auth.token.unitId == resource.data.assignedUnitId);

      // REGLAS DE ESCRITURA (UPDATE):
      allow update: if
        // 1. El usuario puede cancelar SU propia alerta si es 'new' o 'assigned'.
        (request.auth.uid == resource.data.userId &&
         request.resource.data.status == 'cancelled' &&
         (resource.data.status == 'new' || resource.data.status == 'assigned')) ||
        // 2. Un administrador puede actualizar cualquier campo.
        isAdmin() ||
        // 3. Un operador puede actualizar alertas de SU estación.
        (isOperator() && request.auth.token.stationId == resource.data.assignedStationId) ||
        // 4. Una unidad puede actualizar el estado de SU misión asignada.
        (isUnit() && request.auth.token.unitId == resource.data.assignedUnitId);

      // Los documentos de alerta no se borran, se marcan como 'resolved' o 'cancelled'.
      allow delete: if false;
    }
  }
}

    